#!/bin/bash
PROGNAME=$0

function die() {
  local rc=$1
  shift
  local msg=$*
  [ -z "$msg" ] || echo "$msg" >&2
  exit  "$rc"
}

function checkenv() {
  command -v openssl > /dev/null \
    || die 3 "openssl not found, please install"
  command -v ssss-split > /dev/null \
    || die 3 "ssss-split not found, please install ssss"
  command -v ssss-combine > /dev/null \
    || die 3 "ssss-combine not found, please instal ssss"
}

function split() {
  if [[ $# -ne 3 ]]; then
    echo "error: split requires exactly 3 arguments"
    exit 2
  fi
  PARTS=$1
  case $PARTS in
    ''|*[!0-9]*) die 1 "cannot set '$PARTS' shares: not a valid number" ;;
  esac
  THRESHOLD=$2
  case $THRESHOLD in
    ''|*[!0-9]*) die 1 "cannot set '$THRESHOLD' shares: not a valid number" ;;
  esac
  if [[ $PARTS -lt $THRESHOLD ]]; then
    die 1 "Invalid values; parts must be greater than threshold."
  fi
  INPUT=$3
  if [[ ! -f $INPUT ]]; then
    echo "cannot access '$INPUT': no such file" >&2
    exit 1
  fi
  INPUTSHA=$(sha256sum "$INPUT" | head -c 64)
  LABEL="[file=$(basename $INPUT),\
time=$(date --utc --iso-8601=minute),\
parts=$PARTS,\
threshold=$THRESHOLD]"
  CIPHERED=/tmp/${INPUTSHA}.encrypted
  SSSSHARES=/tmp/${INPUTSHA}.sssshares

  # Generating passphrase
  PASSPHRASE=$(openssl rand -hex 128)

  # Ciphering file
  openssl enc -pbkdf2 --base64 \
    -in "$INPUT" \
    -out "$CIPHERED" \
    -pass stdin <<EOF || die 1
$PASSPHRASE
EOF

  # Generating shares for the passphrase
  ssss-split -Q -n "$PARTS" -t "$THRESHOLD" -w "$LABEL" -x \
    <<EOF > "$SSSSHARES" 2>/dev/null || die 1
$PASSPHRASE
EOF

  # Assembling passphrase share with encrypted file
  for line in $(tail -$PARTS "$SSSSHARES"); do
    N=$(echo "$line" | sed -E 's/.*-([0-9]+)-[0-9a-z]+/\1/')
    OUTPUT=$INPUT.share-$N
    { echo "$line"; \
      echo "------ START OF FILE ------"; \
      cat  "$CIPHERED"; \
      echo "------ END OF FILE ------"; \
    } >> "$OUTPUT"
    echo "$OUTPUT"
  done

  rm -f "$SSSSHARES"
  rm -f "$CIPHERED"
}

function combine() {
  # Check all ags are actual files
  for file in "$@" ; do
    if [[ ! -f "$file" ]]; then
      die 1 "cannot access '$file': not such file"
    fi
  done

  # Extract SSSS params from the 1st file
  METAV=$(head -1 "$1" | sed -E 's/\[(.*)\].*/\1/')
  FILENAME=$(echo "$METAV" | tr ',' '\n' | grep 'file=' | cut -d '=' -f 2)
  TIMESTAMP=$(echo "$METAV" | tr ',' '\n' | grep 'time=' | cut -d '=' -f 2)
  PARTS=$(echo "$METAV" | tr ',' '\n' | grep 'parts=' | cut -d '=' -f 2)
  THRESHOLD=$(echo "$METAV" | tr ',' '\n' | grep 'threshold=' | cut -d '=' -f 2)

  # Confirm we got enough shares
  if [[ $PARTS -lt $THRESHOLD ]]; then
    die 1 "missing shares; $THRESHOLD needed, $PARTS found."
  fi

  # Extract encrypted file from the 1st share
  # TODO: maybe check it matches all other shares?
  EXT="${FILENAME##*.}"
  FNM="${FILENAME%.*}"
  CIPHER="$FNM-$TIMESTAMP.$EXT.ciphered"
  PLAIN="$FNM-$TIMESTAMP.$EXT"
  tail -n +2 "$1" | grep -v '\-\-\-\-\-\-' > "$CIPHER" || die 1

  # Prepare ssss input appending shares
  # (remove token, as ssss's -w option don't work quite well)
  INPUT=""
  for ((i=0; i<THRESHOLD; i++)); do
    file=$1
    shift
    INPUT="$(head -1 $file | sed -E 's/\[.*\]-(.*)/\1/')\n$INPUT"
  done

  # Call ssss-combine while extracting the share from each file
  # TODO: should ideally not temp write passphrase
  PASSPHRASEFN=/tmp/$(openssl rand -hex 16).passphrase
  ssss-combine -Q -t "$THRESHOLD" -x <<EOF 2> "$PASSPHRASEFN" || die 1
$(echo -e "$INPUT")
EOF
  PASSPHRASE=$(grep -v WARNING "$PASSPHRASEFN")
  rm -f "$PASSPHRASEFN"
  PASSPHRASELEN=${#PASSPHRASE}
  if [[ "$PASSPHRASELEN" != "256" ]]; then
    die 1 "invalid recombined passphrase; len is $PASSPHRASELEN instead of 256"
  fi

  # Decrypt file
  openssl enc -d -pbkdf2 --base64 \
    -in "$CIPHER" \
    -out "$PLAIN" \
    -pass stdin <<EOF || die 1
$PASSPHRASE
EOF
  rm "$CIPHER"

  # We're done, simply output the filename
  echo "$PLAIN"

}

function help() {
  echo "usage: $PROGNAME {split|combine}"
  echo
  echo "COMMAND: $PROGNAME split SHARES THRESHOLD FILE"
  echo "  Encrypt the file, splits the secret with ssss and generate file"
  echo "  shares for combining the file later."
  echo
  echo "ARGUMENTS:"
  echo "  SHARES"
  echo "    Specify the number of shares to be generated."
  echo "  THRESHOLD"
  echo "    Specify the number of shares necessary to reconstruct the file."
  echo
  echo "  FILE"
  echo "    File to encrypt and share."
  echo
  echo "COMMAND: $PROGNAME combine FILE [FILE ...]"
  echo "  Re-combine shares back into the original file. The files shall be the"
  echo "  ones generated by $PROGNAME split and there must be enough of them for"
  echo "  reaching the ssss threshold."
  echo
  echo "ARGUMENTS"
  echo "  FILE [FILE ...]"
  echo "    List of files with the shares to re-combine"
}

if [[ $# -lt 1 ]]; then
  echo "Missing command; type '$0 --help' for help." >&2
  exit 2
fi
action=$1
shift
case $action in
  'help'|--help|-h)
    help
    exit 0
    ;;
  'split')
    checkenv
    split "$@"
    ;;
  'combine')
    checkenv
    combine "$@"
    ;;
  *)
    echo "Invalid command, must be {split|combine}; type '$0 --help' for help."
    exit 2
    ;;
esac

